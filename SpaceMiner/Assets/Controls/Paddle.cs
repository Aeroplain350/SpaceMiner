//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Controls/Paddle.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Paddle : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Paddle()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Paddle"",
    ""maps"": [
        {
            ""name"": ""PaddleMovement"",
            ""id"": ""e9ce4cf8-0cef-4e88-99aa-1e6f2eb12f32"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""be4df519-53bd-4fe8-841c-8dafb34a7381"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""532c8ef9-0ff5-4fcd-baee-f47967a976ab"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""c3a3c983-999f-4b8b-b7dd-e0d892ebd0ae"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""9967d85d-c97f-4e32-8f2c-0c3e830b8ac8"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""321eb7a3-54ed-4a67-b84b-c1ccf5fe0145"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""39ac5d7f-0655-430b-b8e2-b8a6c0a5a383"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""0886b70a-139a-45fe-b7e7-b9313b1eff30"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PaddleMovement
        m_PaddleMovement = asset.FindActionMap("PaddleMovement", throwIfNotFound: true);
        m_PaddleMovement_Movement = m_PaddleMovement.FindAction("Movement", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PaddleMovement
    private readonly InputActionMap m_PaddleMovement;
    private IPaddleMovementActions m_PaddleMovementActionsCallbackInterface;
    private readonly InputAction m_PaddleMovement_Movement;
    public struct PaddleMovementActions
    {
        private @Paddle m_Wrapper;
        public PaddleMovementActions(@Paddle wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_PaddleMovement_Movement;
        public InputActionMap Get() { return m_Wrapper.m_PaddleMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PaddleMovementActions set) { return set.Get(); }
        public void SetCallbacks(IPaddleMovementActions instance)
        {
            if (m_Wrapper.m_PaddleMovementActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PaddleMovementActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PaddleMovementActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PaddleMovementActionsCallbackInterface.OnMovement;
            }
            m_Wrapper.m_PaddleMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
            }
        }
    }
    public PaddleMovementActions @PaddleMovement => new PaddleMovementActions(this);
    public interface IPaddleMovementActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
}
